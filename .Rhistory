stringsAsFactors = FALSE)
spr$spearman <- sapply(features,
function(f) cor(frame[[f]],
frame$SalePrice,
method = "spearman",
use = 'pairwise.complete.obs'))
spr <- spr[order(spr$spearman),]
ggplot(spr,
aes(x = spearman,
y = reorder(feature, spearman))) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Correlation") +
ylab("Feature") +
ggtitle(label = 'Spearman Correlation Between Variables and Sales Price')
}
spearman(train_num, num_cols)
top_corr <- c('SalePrice',
'OverallQual',
'GrLivArea',
'GarageArea',
'YearBuilt',
'GarageCars',
'FullBath',
'TotalBsmtSF',
'X1stFlrSF',
'GarageYrBlt',
'MasVnrArea',
'LotFrontage'
)
train_num %>%
select(all_of(top_corr)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
train_num %>%
examine_na()
train %<>%
select(-c(MasVnrArea, GarageYrBlt, LotFrontage, MiscVal))
train_num %<>%
select(-c(MasVnrArea, GarageYrBlt, LotFrontage, MiscVal))
num_cols <- num_cols[-c(8, 25,2, 31)]
train_num %<>%
mutate(HouseAge = max(YearBuilt) - YearBuilt,
Yrs_Since_Bought = max(YearBuilt) - YrSold,
Yrs_Since_Remod = max(YearBuilt) - YearRemodAdd) %>%
select(-c(YearBuilt, YrSold, YearRemodAdd))
fix_outliers <- function(data) {
# Calculate Q1 and Q3
Q1 <- quantile(data, 0.25)
Q3 <- quantile(data, 0.75)
# Calculate the Interquartile Range
IQR <- Q3 - Q1
# Calculate lower and upper bounds for outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Replace outliers with upper bound and lower bound
data_fixed <- ifelse(
data > upper_bound,
upper_bound,
ifelse(
data < lower_bound,
lower_bound,
data
)
)
return(data_fixed)
}
outlier_fixed_num <-train_num %>%
select(-SalePrice) %>%
apply(2, fix_outliers)
outlier_fixed_num %<>%
as.data.frame() %>%
mutate(SalePrice = train_num$SalePrice)
plot_individual_boxplot <- function(data){
# Recreate a col names for numeric dataset again since we have modified some cols above
data %<>%
select(-SalePrice) %>%
mutate(SalePrice = train_num$SalePrice)
num_cols <- colnames(data)
# Iterate over the numeric columns and create a box plot for each
for (i in 1:length(num_cols)) {
boxplot(data[,i],
main = paste("Box Plot of",
num_cols[i]),
xlab = "Feature",
ylab = "Values")
}
}
plot_individual_hist <- function(data){
# Recreate a col names for numeric dataset again since we have modified some cols above
data %<>%
select(-SalePrice) %>%
mutate(SalePrice = train_num$SalePrice)
num_cols <- colnames(data)
# Iterate over the numeric columns and create a box plot for each
for (i in 1:length(num_cols)) {
data[, i] %>%
pull() %>%
hist(
main = paste("Histogram of",
num_cols[i]),
xlab = "Feature",
ylab = "Values"
)
}
}
#
plot_individual_boxplot(train_num)
plot_individual_hist(train_num)
outlier_fixed_num %<>%
as_tibble()
plot_individual_boxplot(outlier_fixed_num)
plot_individual_hist(outlier_fixed_num)
# First, we need to rejoin cat and num data together
full_data <- outlier_fixed_num %>%
select(-SalePrice) %>% # SalePrice is already in train_cat
cbind(train_cat) %>%
as_tibble()
# ExterQual
full_data$ExterQual <- fct_recode(full_data$ExterQual,
'1' = 'Fa',
'2' = 'TA',
'3' = 'Gd',
'4' = 'Ex') %>%
as.character() %>%
as.numeric()
# Extercond
full_data$ExterCond <- fct_recode(full_data$ExterCond,
'1' = 'Fa',
'1' = 'Po',
'2' = 'Gd',
'3' = 'TA',
'4' = 'Ex') %>%
as.character() %>%
as.numeric()
# HeatingQC
full_data$HeatingQC <- fct_recode(full_data$HeatingQC,
'1' = 'Po',
'2' = 'Fa',
'3' = 'TA',
'4' = 'Gd',
'5' = 'Ex') %>%
as.character() %>%
as.numeric()
# KitchenQual
full_data$KitchenQual <- fct_recode(full_data$KitchenQual,
'1' = 'Fa',
'2' = 'TA',
'3' = 'Gd',
'4' = 'Ex') %>%
as.character() %>%
as.numeric()
#PoolQC
full_data$PoolQC <- fct_recode(full_data$PoolQC,
'1' = 'No Pool',
'2' = 'Gd',
'3' = 'Fa',
'4' = 'Ex'
) %>%
as.character() %>%
as.numeric()
#FireplaceQu
full_data$FireplaceQu <- fct_recode(full_data$FireplaceQu,
'1' = 'No Fireplace',
'1' = 'Po',
'2' = 'Fa',
'3' = 'Gd',
'3' = 'TA',
'4' = 'Ex') %>%
as.character() %>%
as.numeric()
# SaleCondition
full_data$SaleCondition <- fct_recode(
full_data$SaleCondition,
'1' = 'AdjLand',
'2' = 'Abnorml',
'2' = 'Family',
'3' = 'Alloca',
'3' = 'Normal',
'4' = 'Partial') %>%
as.character() %>%
as.numeric()
# GarageFinish
full_data$GarageFinish <- fct_recode(full_data$GarageFinish,
'1' = 'No Garage',
'2' = 'Unf',
'3' = 'RFn',
'4' = 'Fin'
) %>%
as.character() %>%
as.numeric()
# BsmtQual
full_data$BsmtQual<- fct_recode(full_data$BsmtQual,
'1' = 'No Bsmt',
'1' = 'Fa',
'2' = 'TA',
'3' = 'Gd',
'4' = 'Ex'
) %>%
as.character() %>%
as.numeric()
# BsmtCond
full_data$BsmtCond<- fct_recode(full_data$BsmtCond,
'1' = 'No Bsmt',
'1' = 'Fa',
'1' = 'Po',
'2' = 'TA',
'3' = 'Gd'
) %>%
as.character() %>%
as.numeric()
# BsmtExposure
full_data$BsmtExposure<- fct_recode(full_data$BsmtExposure,
'1' = 'No Bsmt',
'2' = 'No',
'3' = 'Av',
'3' = 'Mn',
'4' = 'Gd'
) %>%
as.character() %>%
as.numeric()
# Get the col names for all categorical vars
original_cat <- train_cat %>%
select(-SalePrice) %>%
colnames()
# create a variable to store ordinal var
ordinal_var_name <- c('ExterQual',
'ExterCond',
'HeatingQC',
'KitchenQual',
'PoolQC',
'FireplaceQu',
'SaleCondition',
'GarageFinish',
'BsmtQual',
'BsmtCond',
'BsmtExposure'
)
ordinal_var <- full_data %>%
select(all_of(ordinal_var_name))
# Dummy variables would exclude ordinal variables
dummy_vars <- train_cat %>%
select(-all_of(c(ordinal_var_name, 'SalePrice')))
# Obtain the dummy variables name to exclude them from the full_data
dummy_vars_name <- dummy_vars %>%
colnames()
# Exclude these cat variables from the full_data (we will merge them back later)
full_data %<>%
select(-all_of(dummy_vars_name))
# create a function to convert cat variables to dummy variables
convert_to_dummies <- function(df){
dummy_matrix <- model.matrix(~.-1, data = df) %>%
data.frame()
return(dummy_matrix)
}
# convert cat variables to dummy variables
dummy_vars %<>%
convert_to_dummies()
SalePrice <- full_data$SalePrice
# Perform the Z-score scaling
scaled_full_data <- full_data %>%
select(-SalePrice) %>%
scale(
center = T,
scale = T
) %>%
as_tibble() %>%
mutate(SalePrice = SalePrice)
# Check NA in each column
na_columns <- apply(scaled_full_data,
2,
function(x) any(is.na(x)))
# Remove NA columns
scaled_full_data <- scaled_full_data[, !na_columns]
full_data <- cbind(scaled_full_data,
dummy_vars)
set.seed(123)
# extract data for predictors and convert them into matrix
predictors <- full_data %>%
select(-SalePrice) %>%
as.matrix()
# Run a basic lasso regression.
lasso_model <- glmnet(predictors,
full_data$SalePrice,
alpha = 1,
standardize = F)
# Choose the best regularization parameter (lambda) using cross-validation:
cv_lasso <- cv.glmnet(predictors,
full_data$SalePrice,
alpha = 1,
standardize = F)
# pick the lambda with 1 standard error from the best lambda
best_lambda <- cv_lasso$lambda.1se
# Run the lasso regression with the updated lambda
final_lasso_model <- glmnet(predictors,
full_data$SalePrice,
alpha = 1,
standardize = F,
lambda = best_lambda)
# Extract coefficients from the new model
lasso_coefficients <- coef(final_lasso_model)
# extract the top variables
lasso_retained_var <- (lasso_coefficients %>%
as.matrix() %>%
data.frame() %>%
filter(s0!=0) %>%
row.names())[-1]
dummy_vars_name_full <- dummy_vars %>%
colnames()
num_best_var_names <- lasso_retained_var[!(lasso_retained_var %in% dummy_vars_name_full)]
pearson_cor <- function(frame, features) {
prs <- data.frame(feature = features,
stringsAsFactors = FALSE)
prs$pearson <- sapply(features,
function(f) cor(frame[[f]],
frame$SalePrice,
method = "pearson",
use = 'everything'))
prs <- prs[order(prs$pearson),]
ggplot(prs,
aes(x = pearson,
y = reorder(feature, pearson))) +
geom_bar(stat = "identity") +
theme_minimal() +
xlab("Correlation") +
ylab("Feature") +
labs(title = 'Pearson Correlation Between Num Varibales vs Sales Price',
caption = 'Scaled Inputs')
}
pearson_cor(full_data, c(num_best_var_names, 'TotRmsAbvGrd'))
lasso_retained_features_data <- full_data %>%
select(all_of(lasso_retained_var)) %>%
mutate(SalePrice = SalePrice)
pca_qual <- lasso_retained_features_data %>%
select(OverallQual,ExterQual, KitchenQual, BsmtQual) %>%
prcomp(center = F,
scale = F)
pca_qual %>%
summary()
# Extract the first and second PCA component of quality
pca_qual_1 <- pca_qual$x[,1]
pca_qual_2 <- pca_qual$x[,2]
pca_qual_1 %<>%
scale()
pca_qual_2 %<>%
scale()
pca_garage <-
lasso_retained_features_data %>%
select(GarageCars, GarageArea) %>%
prcomp(center = F,
scale = F)
# Perform a summary on the PCA
pca_garage %>%
summary()
pca_garage_1 <- pca_garage$x[,1]
pca_garage_1 %<>%
scale() %>%
pca_garage_1 <- pca_garage$x[,1]
pca_garage_1 %<>%
scale()
full_data %<>%
mutate(pca_qual_1 = pca_qual_1,
pca_qual_2 = pca_qual_2,
pca_garage_1 = pca_garage_1,
SalePrice = SalePrice) # just to move the label to the last col
library(sjPlot)
library(sjmisc)
library(sjlabelled)
automate_regression <- function(data,variables) {
models <- list()
num_vars <- length(variables)
for (i in 1:num_vars) {
formula_string <- paste('SalePrice', "~", paste(variables[1:i],
collapse = " + ")
)
formula <- as.formula(formula_string)
models[[variables[i]]] <- lm(data = data, formula)
}
return(models)
}
export_output <- function(model_list, variable_list){
suppressWarnings({
num_vars <- length(variable_list)
tab_model(model_list, dv.labels = rep("SalePrice", num_vars))
})
}
variable_1 <- c("OverallQual",
"GrLivArea",
'pca_garage_1',
"HouseAge",
"FullBath",
"CentralAirY",
"HeatingQC",
"Fireplaces"
)
# Run the linear regression on all models
model_1 <- automate_regression(data = full_data,
variables = variable_1)
# export outputs
output_model_1 <- export_output(model_1, variable_1)
full_data %>%
select(all_of(variable_1)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
variable_2 <- c(
"GrLivArea",
"GarageCars",
"pca_qual_1",
"pca_qual_2",
"Yrs_Since_Remod",
"HouseAge",
"BsmtExposure",
"FoundationPConc"
)
model_2 <- automate_regression(data = full_data,
variables = variable_2)
# export outputs
output_model_2 <- export_output(model_2, variable_2)
full_data %>%
select(all_of(variable_2)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
variable_3 <- c(
"HouseAge",
"OverallQual",
"TotRmsAbvGrd",
"Yrs_Since_Remod",
"Yrs_Since_Bought",
"SaleCondition",
"CentralAirY"
)
model_3 <- automate_regression(data = full_data,
variables = variable_3)
# export outputs
output_model_3 <- export_output(model_3, variable_3)
full_data %>%
select(all_of(variable_3)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
variable_4 <- c(
'pca_garage_1',
"BsmtQual",
"FullBath",
"X1stFlrSF",
"MSSubClass",
"ExterCond",
"CentralAirY",
"GrLivArea"
)
model_4 <- automate_regression(data = full_data,
variables = variable_4)
# export outputs
output_model_4 <- export_output(model_4, variable_4)
full_data %>%
select(all_of(variable_4)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
variable_5 <- c(
'TotRmsAbvGrd',
'pca_garage_1',
'HouseAge',
'Yrs_Since_Remod',
'HeatingQC',
'KitchenQual',
'FireplaceQu'
)
model_5 <- automate_regression(data = full_data,
variables = variable_5)
# export outputs
output_model_5 <- export_output(model_5, variable_5)
full_data %>%
select(all_of(variable_5)) %>%
cor(use = 'pairwise.complete.obs') %>%
corrplot(method = 'number',
type = 'upper',
diag = F,
tl.srt = 45)
output_model_1
output_model_4
output_model_4
output_model_5
variable_5 <- c(
'TotRmsAbvGrd',
'pca_garage_1',
'HouseAge',
'Yrs_Since_Remod',
'HeatingQC',
'KitchenQual'
)
model_5 <- automate_regression(data = full_data,
variables = variable_5)
# export outputs
output_model_5 <- export_output(model_5, variable_5)
output_model_5
output_model_3
output_model_4
output_model_3
